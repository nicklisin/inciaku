version: '3.8'
services:

  redis:
    container_name: redis
    image: redis:alpine

  app:
    restart: always
    volumes:
      - static:/vol/web
    ports:
      - "8000:8000"
    container_name: app
    build:
      context: .
#    environment:
    #   - DEBUG=False
    #   - SECRET_KEY=os.environ.get('SECRET_KEY')
    #   - DB_ENGINE={{env.DB_ENGINE}}
    #   - DB_HOST=db
    #   - DB_NAME=main_db
    #   - DB_USER={{env.DB_USER}}
    #   - DB_PASSWORD={{env.DB_PASSWORD}}
    #   - DJANGO_ALLOWED_HOSTS={{env.DJANGO_ALLOWED_HOSTS}}
    env_file:
      - .env
    depends_on:
      - db
      - redis
  
  db:
    image: postgres:13-alpine
    container_name: db
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=main_db
    env_file:
      - .env
    ports:
      - "5432:5432"

  proxy:
    container_name: proxy
    image: nginx:1.24.0-alpine
    restart: always
    depends_on:
      - app
    ports:
      - "80:80"
    volumes:
      - static:/vol/web

  celeryworker:
    container_name: celeryworker
    build:
      context: .
    restart: on-failure
    environment:
      - BROKER_URL=${BROKER_URL}
      - CELERY_BACKEND=${BROKER_URL}
      - CELERY_BROKER=${BROKER_URL}
    env_file:
      - .env
    depends_on:
      - app
    command: 'celery -A ecomm1 worker -l DEBUG'
    volumes:
      - static:/vol/web

  celerybeat:
    container_name: celerybeat
    build:
      context: .
    restart: on-failure
    environment:
      - BROKER_URL=${BROKER_URL}
      - CELERY_BACKEND=${BROKER_URL}
      - CELERY_BROKER=${BROKER_URL}
    env_file:
      - .env
    depends_on:
      - app
      - celeryworker
    command: 'celery -A ecomm1 beat'
    volumes:
      - static:/vol/web

volumes:
  postgres-data:
  static:
